/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Connectors.dbconnect;
import java.sql.Connection;
import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class CustomerCheckin extends javax.swing.JFrame {
     private Connection conn;
     private String query;
    private String updateCustomerQuery;
    /**
     * Creates new form CustomerCheckin
     */
    public CustomerCheckin() {
        initComponents();
        dbconnect dbc = new dbconnect();
        conn = dbc.getConnection();
        loadData();
        
    }
    public void loadData(){
        //CustomerCheckin();
        JFrame frame = new JFrame("Data from Database");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        JTable table = new JTable(model);
        model.setRowCount(0);

    try {
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM customertenants";
            ResultSet rs = stmt.executeQuery(query);
 
            while (rs.next()) {
                int tenantID = rs.getInt("TenantID");
                String tenantName = rs.getString("TenantName");
                String tenantLName = rs.getString("LastName");
                String gender = rs.getString("Gender");
                String bed = rs.getString("Bed");
                String contact = rs.getString("ContactNumber");
                int roomID = rs.getInt("RoomID");
                String cid = rs.getString("CheckInDate");
                String cod = rs.getString("CheckOutDate");
                String rType = rs.getString("RoomType");
                Object[] rowData = {tenantID, tenantName, tenantLName, gender, bed, contact, roomID, cid, cod, rType};
                model.addRow(rowData);
            }
 
            rs.close();
            stmt.close();
            //conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        jScrollPane1.add(table);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        labelFName = new javax.swing.JLabel();
        labelRId = new javax.swing.JLabel();
        txtTenantName = new javax.swing.JTextField();
        txtRoomID = new javax.swing.JTextField();
        txtcheckin = new javax.swing.JTextField();
        bttnClear = new javax.swing.JButton();
        lblContact = new javax.swing.JLabel();
        txtContactNum = new javax.swing.JTextField();
        lblLName = new javax.swing.JLabel();
        lblCheckin = new javax.swing.JLabel();
        lblCheckout = new javax.swing.JLabel();
        txtcheckout = new javax.swing.JTextField();
        bCheckin = new javax.swing.JButton();
        bDel = new javax.swing.JButton();
        labelTId = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        txtTenantID = new javax.swing.JTextField();
        bttnUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblGender = new javax.swing.JLabel();
        CboxGender = new javax.swing.JComboBox<>();
        lblGender1 = new javax.swing.JLabel();
        Cboxtype = new javax.swing.JComboBox<>();
        lblGender2 = new javax.swing.JLabel();
        CbRoomtype = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bttnSearch = new javax.swing.JButton();
        bttnSearch1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        bttnexit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        labelFName.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        labelFName.setText("First Name:");
        labelFName.setToolTipText("");

        labelRId.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        labelRId.setText("Room ID:");
        labelRId.setToolTipText("");

        txtTenantName.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtTenantName.setToolTipText("");

        txtRoomID.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtRoomID.setToolTipText("");
        txtRoomID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRoomIDActionPerformed(evt);
            }
        });

        txtcheckin.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtcheckin.setToolTipText("");
        txtcheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcheckinActionPerformed(evt);
            }
        });

        bttnClear.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnClear.setText("Clear");
        bttnClear.setToolTipText("");
        bttnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnClearActionPerformed(evt);
            }
        });

        lblContact.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblContact.setText("Contact #:");
        lblContact.setToolTipText("");

        txtContactNum.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtContactNum.setToolTipText("");

        lblLName.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblLName.setText("Last Name:");
        lblLName.setToolTipText("");

        lblCheckin.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblCheckin.setText("Check In Date:");
        lblCheckin.setToolTipText("");

        lblCheckout.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblCheckout.setText("Check Out Date:");
        lblCheckout.setToolTipText("");

        txtcheckout.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtcheckout.setToolTipText("");

        bCheckin.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bCheckin.setText("Check in");
        bCheckin.setToolTipText("");
        bCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCheckinActionPerformed(evt);
            }
        });

        bDel.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bDel.setText("Delete");
        bDel.setToolTipText("");
        bDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDelActionPerformed(evt);
            }
        });

        labelTId.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        labelTId.setText("Tenant ID:");
        labelTId.setToolTipText("");

        txtLname.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtLname.setToolTipText("");

        txtTenantID.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtTenantID.setToolTipText("");
        txtTenantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenantIDActionPerformed(evt);
            }
        });

        bttnUpdate.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnUpdate.setText("Update");
        bttnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnUpdateActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tenant ID", "First Name", "Last Name", "Gender", "Bed", "Contact Num.", "Room ID", "Check In Date", "Check Out Date", "Room Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        lblGender.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblGender.setText("Gender:");
        lblGender.setToolTipText("");

        CboxGender.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        CboxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female ", "Male", "Unknown" }));

        lblGender1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblGender1.setText("Bed:");
        lblGender1.setToolTipText("");

        Cboxtype.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        Cboxtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single", "Double", "Group" }));

        lblGender2.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblGender2.setText("Room Type:");
        lblGender2.setToolTipText("");

        CbRoomtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AC", "Non-AC" }));

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        bttnSearch.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnSearch.setText("Search Tenant ID");
        bttnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSearchActionPerformed(evt);
            }
        });

        bttnSearch1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnSearch1.setText("Payment");
        bttnSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSearch1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/check-in-desk.png"))); // NOI18N
        jLabel4.setText("Customer Maintenance");

        bttnexit.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        bttnexit.setText("Back");
        bttnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnexitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelFName)
                                    .addComponent(lblLName, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGender1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtLname, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(txtTenantName, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(CboxGender, 0, 168, Short.MAX_VALUE)
                                    .addComponent(Cboxtype, 0, 168, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelTId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTenantID, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblGender2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelRId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtRoomID, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(CbRoomtype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtcheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContactNum, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblCheckout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bDel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bCheckin))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bttnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bttnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(bttnSearch1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(bttnSearch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(258, 258, 258)
                        .addComponent(bttnexit)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(bttnexit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTId)
                            .addComponent(txtTenantID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContact)
                            .addComponent(txtContactNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtTenantName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelFName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLName)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtcheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckout)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bttnClear)
                            .addComponent(bCheckin))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bDel)
                            .addComponent(bttnUpdate))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender)
                            .addComponent(CboxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGender2)
                            .addComponent(CbRoomtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender1)
                            .addComponent(Cboxtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelRId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(bttnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(bttnSearch1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(22, 22, 22))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bttnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnexitActionPerformed
        setVisible(false);
    }//GEN-LAST:event_bttnexitActionPerformed

    private void txtRoomIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoomIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRoomIDActionPerformed

    private void txtcheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcheckinActionPerformed

    }//GEN-LAST:event_txtcheckinActionPerformed

    private void bttnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnClearActionPerformed
        setVisible(false);
        JOptionPane.showConfirmDialog(null, "Are you sure you want to Clear?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        new CustomerCheckin().setVisible(true);
    }//GEN-LAST:event_bttnClearActionPerformed

    private void bCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCheckinActionPerformed
        String sTid = txtTenantID.getText();
        String sTname = txtTenantName.getText();
        String sLname = txtLname.getText();
        String sContact = txtContactNum.getText();
        String sRID = txtRoomID.getText();
        String sCID = txtcheckin.getText();
        String sCOD = txtcheckout.getText();
        String sGender = (String) CboxGender.getSelectedItem();
        String sBed = (String) Cboxtype.getSelectedItem();
        String sRoomType = (String) CbRoomtype.getSelectedItem();
        
        JOptionPane.showConfirmDialog(null, "Are you sure you want to proceed with the check-in?", "Confirm Check-In", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    try{
        int RoomID = Integer.parseInt(sRID);
        int maxOccupants = 0;
        
        // Determine the maximum number of occupants based on room type
        switch (sBed) {
            case "Single":
                maxOccupants = 1;
                break;
            case "Double":
                maxOccupants = 2;
                break;
            case "Group":
                maxOccupants = 4;
                break;
            default:
                JOptionPane.showMessageDialog(null, "Invalid Room Type!", "Room Error", JOptionPane.ERROR_MESSAGE);
                return;
        }

        try (Connection connect = dbconnect.getConnection()) {
        // Check the room's availability and current number of occupants
            String checkRoomQuery = "SELECT Status, NoofAvailableBed FROM rooms WHERE RoomID = ?";
            PreparedStatement checkRoomStmt = connect.prepareStatement(checkRoomQuery);
            checkRoomStmt.setInt(1, RoomID);
            ResultSet rs = checkRoomStmt.executeQuery();
            

            if (rs.next()) {
                String roomStatus = rs.getString("Status");
                int currentAvailableBeds = rs.getInt("NoofAvailableBed");

                // Check if room is available
                if (roomStatus.equals("Occupied") || currentAvailableBeds <= 0) {
                    JOptionPane.showMessageDialog(null, "Room is full or not available!", "Room Error", JOptionPane.ERROR_MESSAGE);
                    return; // Exit if the room is full or not available
                }

                // Check if the room has enough available beds for maxOccupants
                if (currentAvailableBeds < maxOccupants) {
                    JOptionPane.showMessageDialog(null, "Room does not have enough available beds for the selected occupancy!", "Occupancy Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Update the room's available beds
                currentAvailableBeds -= maxOccupants; // Decrease available beds by the number of people checking in
                String newStatus = (currentAvailableBeds == 0) ? "Occupied" : "Available";

                String updateRoomQuery = "UPDATE rooms SET NoofAvailableBed = ?, Status = ? WHERE RoomID = ?";
                PreparedStatement updateRoomStmt = connect.prepareStatement(updateRoomQuery);
                updateRoomStmt.setInt(1, currentAvailableBeds);
                updateRoomStmt.setString(2, newStatus);
                updateRoomStmt.setInt(3, RoomID);
                updateRoomStmt.executeUpdate();

                // Insert the tenant data into the database
                String query = "INSERT INTO `customertenants` (`TenantID`, `TenantName`, `LastName`, `Gender`, `Bed`, `ContactNumber`, `RoomID`, `CheckInDate`, `CheckOutDate`, `RoomType`) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pstmt = connect.prepareStatement(query);
                pstmt.setString(1, sTname);
                pstmt.setString(2, sLname);
                pstmt.setString(3, sGender);
                pstmt.setString(4, sBed);
                pstmt.setString(5, sContact);
                pstmt.setInt(6, RoomID);
                pstmt.setString(7, sCID);
                pstmt.setString(8, sCOD);
                pstmt.setString(9, sRoomType);
                pstmt.executeUpdate();

                JOptionPane.showMessageDialog(null, "Check-in successful!", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadData();
                // Clear the input fields
                txtTenantName.setText("");
                txtLname.setText("");
                CboxGender.setSelectedItem("Male");
                Cboxtype.setSelectedItem("Single");
                txtContactNum.setText("");
                txtRoomID.setText("");
                txtcheckin.setText("");
                txtcheckout.setText("");
                CbRoomtype.setSelectedItem("AC");
            } else {
                JOptionPane.showMessageDialog(null, "Room ID does not exist!", "Room Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "An error occurred during check-in!", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Room ID must be a number!", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_bCheckinActionPerformed

    private void bDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDelActionPerformed
        String sTID = txtTenantID.getText(); // Get Tenant ID from the text field
        String sRID = txtRoomID.getText();   // Get Room ID from the text field
        
        JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this tenant and update room availability?", "Confirm Deletion", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);

        try {
            Connection connect = dbconnect.getConnection();

            //Retrieve the current available bed count for the room
            String checkRoomQuery = "SELECT NoofAvailableBed FROM rooms WHERE RoomID = ?";
            PreparedStatement checkRoomStmt = connect.prepareStatement(checkRoomQuery);
            checkRoomStmt.setInt(1, Integer.parseInt(sRID));
            ResultSet rs = checkRoomStmt.executeQuery();

            if (rs.next()) {
                int currentAvailableBeds = rs.getInt("NoofAvailableBed");

                // Increment the available bed count by 1 (since tenant is being deleted)
                currentAvailableBeds++;

                //Update the NoofAvailableBed and Room Status in the rooms table
                String updateRoomQuery = "UPDATE rooms SET NoofAvailableBed = ?, Status = ? WHERE RoomID = ?";
                PreparedStatement updateRoomStmt = connect.prepareStatement(updateRoomQuery);
                updateRoomStmt.setInt(1, currentAvailableBeds);
                updateRoomStmt.setString(2, (currentAvailableBeds > 0) ? "Available" : "Occupied");
                updateRoomStmt.setInt(3, Integer.parseInt(sRID));
                updateRoomStmt.executeUpdate();
            }

            // Delete the tenant from the customertenants table
            String deleteQuery = "DELETE FROM `customertenants` WHERE `TenantID` = ?";
            PreparedStatement deleteTenantStmt = connect.prepareStatement(deleteQuery);
            deleteTenantStmt.setInt(1, Integer.parseInt(sTID));
            deleteTenantStmt.executeUpdate();

            //Reload the data after deletion (if applicable)
            loadData();

            // Show success message
            JOptionPane.showMessageDialog(null, "Tenant Deleted and Room Availability Updated!", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            txtTenantName.setText("");
            txtLname.setText("");
            CboxGender.setSelectedItem("Male");
            Cboxtype.setSelectedItem("Single");
            txtContactNum.setText("");
            txtRoomID.setText("");
            txtcheckin.setText("");
            txtcheckout.setText("");
            CbRoomtype.setSelectedItem("AC");
            

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Deleting Unsuccessful!", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid input format for TenantID or RoomID!", "Input Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bDelActionPerformed

    private void txtTenantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenantIDActionPerformed

    private void bttnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnUpdateActionPerformed
        String sTid = txtTenantID.getText();
        String sTname = txtTenantName.getText();
        String sLname = txtLname.getText();
        String sContact = txtContactNum.getText();
        String sRID = txtRoomID.getText();
        String sCID = txtcheckin.getText();
        String sCOD = txtcheckout.getText();
        String sGender = (String) CboxGender.getSelectedItem();
        String sBed = (String) Cboxtype.getSelectedItem();
        String sRoomType = (String) CbRoomtype.getSelectedItem();
        
        JOptionPane.showConfirmDialog(null, "Are you sure you want to update this customer information?", "Confirm Update", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        try {
            int TenantID = Integer.parseInt(sTid);
            
            Connection connect = dbconnect.getConnection();
            String query = "UPDATE customertenants SET TenantName = ?, LastName = ?, Gender = ?, Bed = ?, ContactNumber = ?, RoomID = ?, CheckInDate = ?, CheckOutDate = ?, RoomType = ? WHERE TenantID = ?";
            PreparedStatement updateCustomerStmt = connect.prepareStatement(query);
            updateCustomerStmt.setString(1, sTname);
            updateCustomerStmt.setString(2, sLname);
            updateCustomerStmt.setString(3, sGender);
            updateCustomerStmt.setString(4, sBed);
            updateCustomerStmt.setString(5, sContact);
            updateCustomerStmt.setString(6, sRID);
            updateCustomerStmt.setString(7, sCID);
            updateCustomerStmt.setString(8, sCOD);
            updateCustomerStmt.setString(9, sRoomType);
            updateCustomerStmt.setInt(10, TenantID);
            updateCustomerStmt.executeUpdate();
            loadData();
            
            JOptionPane.showMessageDialog(null, "Customer Maintenance Updated!", "Updating Successfully", 0);
            
            txtTenantName.setText("");
            txtLname.setText("");
            CboxGender.setSelectedItem("Male");
            Cboxtype.setSelectedItem("Single");
            txtContactNum.setText("");
            txtRoomID.setText("");
            txtcheckin.setText("");
            txtcheckout.setText("");
            CbRoomtype.setSelectedItem("AC");
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Updating Unsuccessfully!", "Customer Maintenance Error!", 0);
            e.printStackTrace();
        }   
    }//GEN-LAST:event_bttnUpdateActionPerformed

    private void bttnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSearchActionPerformed
        String tenantID = txtTenantID.getText(); // Retrieve TenantID from the text field

        if (tenantID == null || tenantID.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter a valid Tenant ID!", "Input Error", JOptionPane.WARNING_MESSAGE);
            return; // Exit the method if no TenantID is provided
        }
        
        JOptionPane.showConfirmDialog(null, "Are you sure you want to search for tenant details?", "Confirm Search", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        try (Connection connect = dbconnect.getConnection()) {
            // Query to search for tenant details by TenantID
            String query = "SELECT * FROM customertenants WHERE TenantID = ?";
            PreparedStatement pstmt = connect.prepareStatement(query);
            pstmt.setString(1, tenantID);

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                // Populate the text fields with tenant details
                txtTenantID.setText(rs.getString("TenantID"));
                txtTenantName.setText(rs.getString("TenantName"));
                txtLname.setText(rs.getString("LastName"));
                txtContactNum.setText(rs.getString("ContactNumber"));
                txtRoomID.setText(rs.getString("RoomID"));
                txtcheckin.setText(rs.getString("CheckInDate"));
                txtcheckout.setText(rs.getString("CheckOutDate"));
                CboxGender.setSelectedItem(rs.getString("Gender"));
                Cboxtype.setSelectedItem(rs.getString("Bed"));
                CbRoomtype.setSelectedItem(rs.getString("RoomType"));

                JOptionPane.showMessageDialog(null, "Tenant Found!", "Search Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                // Show message if no tenant is found
                JOptionPane.showMessageDialog(null, "No tenant found with the given Tenant ID.", "Search Failed", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error searching for tenant!", "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }//GEN-LAST:event_bttnSearchActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.rowAtPoint(evt.getPoint());
        txtTenantID.setText(Integer.toString( (int)jTable1.getValueAt(row, 0)));
        txtTenantName.setText((String)jTable1.getValueAt(row, 1));
        txtLname.setText((String)jTable1.getValueAt(row, 2));
        CboxGender.setSelectedItem((String)jTable1.getValueAt(row, 3));
        Cboxtype.setSelectedItem((String)jTable1.getValueAt(row, 4));
        txtContactNum.setText((String) jTable1.getValueAt(row, 5));
        txtRoomID.setText(Integer.toString( (int)jTable1.getValueAt(row, 6)));
        txtcheckin.setText((String) jTable1.getValueAt(row, 7));
        txtcheckout.setText((String) jTable1.getValueAt(row, 8));
        CbRoomtype.setSelectedItem((String)jTable1.getValueAt(row, 9));
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void bttnSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSearch1ActionPerformed
        JOptionPane.showConfirmDialog(null, "Are you sure you want to proceed to the Payment Method?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        new PaymentMethod().setVisible(true);
    }//GEN-LAST:event_bttnSearch1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerCheckin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CbRoomtype;
    private javax.swing.JComboBox<String> CboxGender;
    private javax.swing.JComboBox<String> Cboxtype;
    private javax.swing.JButton bCheckin;
    private javax.swing.JButton bDel;
    private javax.swing.JButton bttnClear;
    private javax.swing.JButton bttnSearch;
    private javax.swing.JButton bttnSearch1;
    private javax.swing.JButton bttnUpdate;
    private javax.swing.JButton bttnexit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelFName;
    private javax.swing.JLabel labelRId;
    private javax.swing.JLabel labelTId;
    private javax.swing.JLabel lblCheckin;
    private javax.swing.JLabel lblCheckout;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGender1;
    private javax.swing.JLabel lblGender2;
    private javax.swing.JLabel lblLName;
    private javax.swing.JTextField txtContactNum;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtTenantID;
    private javax.swing.JTextField txtTenantName;
    private javax.swing.JTextField txtcheckin;
    private javax.swing.JTextField txtcheckout;
    // End of variables declaration//GEN-END:variables
}
