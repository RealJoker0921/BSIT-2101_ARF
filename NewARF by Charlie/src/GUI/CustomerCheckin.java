/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import Connectors.dbconnect;
import java.sql.Connection;
import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author User
 */
public class CustomerCheckin extends javax.swing.JFrame {
     private Connection conn;
     private String query;
    /**
     * Creates new form CustomerCheckin
     */
    public CustomerCheckin() {
        initComponents();
        dbconnect dbc = new dbconnect();
        conn = dbc.getConnection();
        loadData();
        
    }
    public void loadData(){
        //CustomerCheckin();
        JFrame frame = new JFrame("Data from Database");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //String[] columnNames = {"Tenant ID", "First Name", "Last Name", "Gender", "Bed", "No of Pax", "Contact Number", "Room ID", "Check In Date", "Check Out Date", "Room Type"};
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //model.addRow(columnNames);
        JTable table = new JTable(model);
        model.setRowCount(0);

    try {
            Statement stmt = conn.createStatement();
            String query = "SELECT * FROM customertenants";
            ResultSet rs = stmt.executeQuery(query);
 
            while (rs.next()) {
                int tenantID = rs.getInt("Tenant ID");
                String tenantName = rs.getString("Tenant Name");
                String tenantLName = rs.getString("Last Name");
                String gender = rs.getString("Gender");
                String bed = rs.getString("Bed");
                int np = rs.getInt("No of Pax");
                String contact = rs.getString("Contact Number");
                int roomID = rs.getInt("Room ID");
                String cid = rs.getString("Check In Date");
                String cod = rs.getString("Check Out Date");
                String rType = rs.getString("Room Type");
                Object[] rowData = {tenantID, tenantName, tenantLName, gender, bed, np, contact, roomID, cid, cod, rType};
                model.addRow(rowData);
            }
 
            rs.close();
            stmt.close();
            //conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        jScrollPane1.add(table);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        bttnexit = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        labelFName = new javax.swing.JLabel();
        labelRId = new javax.swing.JLabel();
        txtTenantName = new javax.swing.JTextField();
        txtRoomID = new javax.swing.JTextField();
        txtcheckin = new javax.swing.JTextField();
        bttnClear = new javax.swing.JButton();
        lblContact = new javax.swing.JLabel();
        txtContactNum = new javax.swing.JTextField();
        lblLName = new javax.swing.JLabel();
        lblCheckin = new javax.swing.JLabel();
        lblCheckout = new javax.swing.JLabel();
        txtcheckout = new javax.swing.JTextField();
        bCheckin = new javax.swing.JButton();
        bDel = new javax.swing.JButton();
        labelTId = new javax.swing.JLabel();
        txtLname = new javax.swing.JTextField();
        txtTenantID = new javax.swing.JTextField();
        bttnUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblGender = new javax.swing.JLabel();
        CboxGender = new javax.swing.JComboBox<>();
        lblGender1 = new javax.swing.JLabel();
        Cboxtype = new javax.swing.JComboBox<>();
        lblGender2 = new javax.swing.JLabel();
        CbRoomtype = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bttnSearch = new javax.swing.JButton();
        txtSearchField = new javax.swing.JTextField();
        lblNoPax = new javax.swing.JLabel();
        CboxNoOfPax = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel4.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/check-in-desk.png"))); // NOI18N
        jLabel4.setText("Customer Maintenance");

        bttnexit.setFont(new java.awt.Font("Lucida Bright", 1, 18)); // NOI18N
        bttnexit.setText("Back");
        bttnexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnexitActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 204, 204));

        labelFName.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        labelFName.setText("First Name:");
        labelFName.setToolTipText("");

        labelRId.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        labelRId.setText("Room ID:");
        labelRId.setToolTipText("");

        txtTenantName.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtTenantName.setToolTipText("");

        txtRoomID.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtRoomID.setToolTipText("");
        txtRoomID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRoomIDActionPerformed(evt);
            }
        });

        txtcheckin.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtcheckin.setToolTipText("");
        txtcheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcheckinActionPerformed(evt);
            }
        });

        bttnClear.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnClear.setText("Clear");
        bttnClear.setToolTipText("");
        bttnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnClearActionPerformed(evt);
            }
        });

        lblContact.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblContact.setText("Contact #:");
        lblContact.setToolTipText("");

        txtContactNum.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtContactNum.setToolTipText("");

        lblLName.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblLName.setText("Last Name:");
        lblLName.setToolTipText("");

        lblCheckin.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblCheckin.setText("Check In Date:");
        lblCheckin.setToolTipText("");

        lblCheckout.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblCheckout.setText("Check Out Date:");
        lblCheckout.setToolTipText("");

        txtcheckout.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtcheckout.setToolTipText("");

        bCheckin.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bCheckin.setText("Check in");
        bCheckin.setToolTipText("");
        bCheckin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bCheckinActionPerformed(evt);
            }
        });

        bDel.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bDel.setText("Delete");
        bDel.setToolTipText("");
        bDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bDelActionPerformed(evt);
            }
        });

        labelTId.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        labelTId.setText("Tenant ID:");
        labelTId.setToolTipText("");

        txtLname.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtLname.setToolTipText("");

        txtTenantID.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtTenantID.setToolTipText("");
        txtTenantID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTenantIDActionPerformed(evt);
            }
        });

        bttnUpdate.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnUpdate.setText("Update");
        bttnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnUpdateActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tenant ID", "First Name", "Last Name", "Gender", "Bed", "No of Pax", "Contact Num.", "Room ID", "Check In Date", "Check Out Date", "Room Type"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue("Tenant ID");
            jTable1.getColumnModel().getColumn(1).setHeaderValue("First Name");
            jTable1.getColumnModel().getColumn(2).setHeaderValue("Last Name");
            jTable1.getColumnModel().getColumn(3).setHeaderValue("Gender");
            jTable1.getColumnModel().getColumn(4).setHeaderValue("Bed");
            jTable1.getColumnModel().getColumn(5).setHeaderValue("No of Pax");
            jTable1.getColumnModel().getColumn(6).setHeaderValue("Contact Num.");
            jTable1.getColumnModel().getColumn(7).setHeaderValue("Room ID");
            jTable1.getColumnModel().getColumn(8).setHeaderValue("Check In Date");
            jTable1.getColumnModel().getColumn(9).setHeaderValue("Check Out Date");
            jTable1.getColumnModel().getColumn(10).setHeaderValue("Room Type");
        }

        lblGender.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblGender.setText("Gender:");
        lblGender.setToolTipText("");

        CboxGender.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        CboxGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Female ", "Male", "Unknown" }));

        lblGender1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblGender1.setText("Bed:");
        lblGender1.setToolTipText("");

        Cboxtype.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        Cboxtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Single", "Double", "Barkada", "Family Size" }));

        lblGender2.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblGender2.setText("Room Type:");
        lblGender2.setToolTipText("");

        CbRoomtype.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AC", "Non-AC" }));

        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        bttnSearch.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        bttnSearch.setText("Search Tenant ID");
        bttnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bttnSearchActionPerformed(evt);
            }
        });

        txtSearchField.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        txtSearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchFieldActionPerformed(evt);
            }
        });

        lblNoPax.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        lblNoPax.setText("No of Pax:");

        CboxNoOfPax.setFont(new java.awt.Font("Lucida Bright", 0, 14)); // NOI18N
        CboxNoOfPax.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "5", "8" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(labelFName)
                                    .addComponent(lblLName, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblGender1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblNoPax, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtLname, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(txtTenantName, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(CboxGender, 0, 168, Short.MAX_VALUE)
                                    .addComponent(Cboxtype, 0, 168, Short.MAX_VALUE)
                                    .addComponent(CboxNoOfPax, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(labelTId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTenantID, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(57, 57, 57)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblGender2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelRId, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtRoomID, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(CbRoomtype, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblContact, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtcheckin, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContactNum, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblCheckout)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bCheckin)
                                    .addComponent(bDel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bttnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bttnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(bttnSearch)
                            .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelTId)
                            .addComponent(txtTenantID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblContact)
                            .addComponent(txtContactNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtTenantName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelFName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblLName)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtcheckin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckin))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtcheckout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblCheckout)))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bCheckin)
                            .addComponent(bttnClear))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bDel)
                            .addComponent(bttnUpdate))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender)
                            .addComponent(CboxGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGender2)
                            .addComponent(CbRoomtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblGender1)
                            .addComponent(Cboxtype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRoomID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelRId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(bttnSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtSearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNoPax)
                    .addComponent(CboxNoOfPax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bttnexit)))
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(bttnexit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void bttnexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnexitActionPerformed
        setVisible(false);
    }//GEN-LAST:event_bttnexitActionPerformed

    private void txtRoomIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRoomIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtRoomIDActionPerformed

    private void txtcheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcheckinActionPerformed

    }//GEN-LAST:event_txtcheckinActionPerformed

    private void bttnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnClearActionPerformed
        setVisible(false);
        new CustomerCheckin().setVisible(true);
    }//GEN-LAST:event_bttnClearActionPerformed

    private void bCheckinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bCheckinActionPerformed
        String sTid = txtTenantID.getText();
        String sTname = txtTenantName.getText();
        String sLname = txtLname.getText();
        String sContact = txtContactNum.getText();
        String sRID = txtRoomID.getText();
        String sCID = txtcheckin.getText();
        String sCOD = txtcheckout.getText();
        String sGender = (String) CboxGender.getSelectedItem();
        String sBed = (String) Cboxtype.getSelectedItem();
        String sNoOfPax = (String) CboxNoOfPax.getSelectedItem();
        String sRoomType = (String) CbRoomtype.getSelectedItem();

    // Parse RoomID and Dates
    try {
        int RoomID = Integer.parseInt(sRID);
        int requestedPax = Integer.parseInt(sNoOfPax);  // Number of people requesting the room
        Date checkInDate = Date.valueOf(sCID);  // Assuming the date is in yyyy-mm-dd format
        Date checkOutDate = Date.valueOf(sCOD); // Assuming the date is in yyyy-mm-dd format

        // Query to get the room's capacity based on the RoomType or Bed size
        int roomCapacity = getRoomCapacity(sRoomType);  // You can adjust this logic based on your database or room types

        if (roomCapacity < requestedPax) {
            JOptionPane.showMessageDialog(null, "Room cannot accommodate the requested number of people.", 
                                          "Booking Error", JOptionPane.ERROR_MESSAGE);
            return;  // Exit the method if the room capacity is less than the requested pax
        }

        // Check if the room is already booked during the same date range
        try (Connection connect = dbconnect.getConnection()) {
            // Query to check for overlapping bookings
            String overlapQuery = "SELECT COUNT(*) FROM customertenants " +
                                  "WHERE `Room ID` = ? " +
                                  "AND ((`Check In Date` BETWEEN ? AND ?) OR (`Check Out Date` BETWEEN ? AND ?) " +
                                  "OR (? BETWEEN `Check In Date` AND `Check Out Date`) OR (? BETWEEN `Check In Date` AND `Check Out Date`))";
            PreparedStatement pstmtCheckOverlap = connect.prepareStatement(overlapQuery);
            pstmtCheckOverlap.setInt(1, RoomID);
            pstmtCheckOverlap.setDate(2, checkInDate);
            pstmtCheckOverlap.setDate(3, checkOutDate);
            pstmtCheckOverlap.setDate(4, checkInDate);
            pstmtCheckOverlap.setDate(5, checkOutDate);
            pstmtCheckOverlap.setDate(6, checkInDate);
            pstmtCheckOverlap.setDate(7, checkOutDate);
            
            ResultSet rsOverlap = pstmtCheckOverlap.executeQuery();
            rsOverlap.next();
            int count = rsOverlap.getInt(1);

            if (count > 0) {
                // Room is already booked during the selected date range
                JOptionPane.showMessageDialog(null, "This room is already booked for the selected dates.", 
                                              "Booking Error", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method if there is an overlap
            }

            // Room is not booked, proceed with the insertion
            String query = "INSERT INTO `customertenants` (`Tenant ID`, `Tenant Name`, `Last Name`, `Gender`, `Bed`, " +
                           "`No of Pax`, `Contact Number`, `Room ID`, `Check In Date`, `Check Out Date`, `Room Type`) " +
                           "VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement pstmt = connect.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            int i = 1;
            pstmt.setString(i++, sTid);
            pstmt.setString(i++, sTname); 
            pstmt.setString(i++, sLname); 
            pstmt.setString(i++, sGender);
            pstmt.setString(i++, sBed);
            pstmt.setString(i++, sNoOfPax);
            pstmt.setString(i++, sContact); 
            pstmt.setInt(i++, RoomID); 
            pstmt.setDate(i++, checkInDate); 
            pstmt.setDate(i++, checkOutDate); 
            pstmt.setString(i++, sRoomType);
            pstmt.executeUpdate();
            
            loadData();  // Load the updated data in the UI
            JOptionPane.showMessageDialog(null, "New Tenant Added!", "Adding Tenant Successfully", 0);

            // Clear fields after successful insertion
            txtTenantName.setText("");
            txtLname.setText("");
            CboxGender.setSelectedItem("Male");
            Cboxtype.setSelectedItem("Single");
            CboxNoOfPax.setSelectedItem("1");
            txtContactNum.setText("");
            txtRoomID.setText("");
            txtcheckin.setText("");
            txtcheckout.setText("");
            CbRoomtype.setSelectedItem("AC");

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Adding Unsuccessfully!", "Tenant Error!", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Room ID or Number of Pax must be a valid number!", "Input Error", JOptionPane.ERROR_MESSAGE);
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(null, "Invalid date format. Please use yyyy-mm-dd.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Helper method to get the room capacity based on the room type
private int getRoomCapacity(String roomType) {
    switch (roomType) {
        case "Single":
            return 1;  // Single room can accommodate 1 person
        case "Double":
            return 2;  // Double room can accommodate 2 people
        case "Triple":
            return 3;  // Triple room can accommodate 3 people
        case "Quad":
            return 4;  // Quad room can accommodate 4 people
        case "Suite":
            return 5;  // Suite room can accommodate 5 people
        default:
            return 1;  // Default to single room if room type is unknown
    }

        
        
    
    }//GEN-LAST:event_bCheckinActionPerformed

    private void bDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDelActionPerformed
        String sTID = txtTenantID.getText();
        String sTname = txtTenantName.getText();
        String sLname = txtLname.getText();
        String sContact = txtContactNum.getText();
        String sRID = txtRoomID.getText();
        String sCID = txtcheckin.getText();
        String sCOD = txtcheckout.getText();

        int ID = Integer.parseInt(sTID);
        int RoomID = Integer.parseInt(sRID);

        try {
            Statement stmt= conn.createStatement();
            String query = "DELETE FROM `tenants` WHERE `tenants`.`Tenant ID` = '"+sTID+"'";
            stmt.execute(query);
            JOptionPane.showMessageDialog(null, "Tenant Deleted!", "Deleting Tenant Successfully", 0);
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Deleting Unsuccessfully!", "TenantError!", 0);
        }
    }//GEN-LAST:event_bDelActionPerformed

    private void txtTenantIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTenantIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTenantIDActionPerformed

    private void bttnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnUpdateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bttnUpdateActionPerformed

    private void bttnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bttnSearchActionPerformed
        String sTID = txtSearchField.getText();

    if (sTID.trim().isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please enter a Tenant ID.", "Input Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Prepare query using a prepared statement to prevent SQL injection
        String query = "SELECT * FROM tenants WHERE `Tenant ID` = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(query)) {
            pstmt.setString(1, sTID); // Set the Tenant ID in the query

            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                String tenantName = rs.getString("Tenant Name");
                String lname = rs.getString("Lname");
                String contact = rs.getString("Contact Num");
                String roomID = rs.getString("Room ID");
                String checkIn = rs.getString("Checkin");
                String checkOut = rs.getString("Checkout");

                // Handle NULL values by checking them before displaying
                tenantName = (tenantName != null) ? tenantName : "N/A";
                lname = (lname != null) ? lname : "N/A";
                contact = (contact != null) ? contact : "N/A";
                roomID = (roomID != null) ? roomID : "N/A";
                checkIn = (checkIn != null) ? checkIn : "N/A";
                checkOut = (checkOut != null) ? checkOut : "N/A";

                JOptionPane.showMessageDialog(null, 
                    "Tenant Found:\n" +
                    "Name: " + tenantName + "\n" +
                    "Last Name: " + lname + "\n" +
                    "Contact: " + contact + "\n" +
                    "Room ID: " + roomID + "\n" +
                    "Check-in Date: " + checkIn + "\n" +
                    "Check-out Date: " + checkOut,
                    "Tenant Found", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Tenant not found!", "Search Result", JOptionPane.WARNING_MESSAGE);
            }
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error occurred while searching for tenant!", "SQL Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();  // Optional: Log the full stack trace for debugging
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "An unexpected error occurred!", "Error", JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();  // Optional: Log the full stack trace for debugging
    }
    }//GEN-LAST:event_bttnSearchActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void txtSearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchFieldActionPerformed
       
    }//GEN-LAST:event_txtSearchFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CustomerCheckin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CustomerCheckin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CbRoomtype;
    private javax.swing.JComboBox<String> CboxGender;
    private javax.swing.JComboBox<String> CboxNoOfPax;
    private javax.swing.JComboBox<String> Cboxtype;
    private javax.swing.JButton bCheckin;
    private javax.swing.JButton bDel;
    private javax.swing.JButton bttnClear;
    private javax.swing.JButton bttnSearch;
    private javax.swing.JButton bttnUpdate;
    private javax.swing.JButton bttnexit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelFName;
    private javax.swing.JLabel labelRId;
    private javax.swing.JLabel labelTId;
    private javax.swing.JLabel lblCheckin;
    private javax.swing.JLabel lblCheckout;
    private javax.swing.JLabel lblContact;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblGender1;
    private javax.swing.JLabel lblGender2;
    private javax.swing.JLabel lblLName;
    private javax.swing.JLabel lblNoPax;
    private javax.swing.JTextField txtContactNum;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtRoomID;
    private javax.swing.JTextField txtSearchField;
    private javax.swing.JTextField txtTenantID;
    private javax.swing.JTextField txtTenantName;
    private javax.swing.JTextField txtcheckin;
    private javax.swing.JTextField txtcheckout;
    // End of variables declaration//GEN-END:variables
}
